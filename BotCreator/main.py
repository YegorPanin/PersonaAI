import os
import re
import random
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError, TelegramUnauthorizedError
from dotenv import load_dotenv
import aiosqlite

from bot.database import DatabaseHandler
from bot.openrouter import OpenRouterManager
from bot.keyboards import (
    create_main_keyboard,
    create_cancel_keyboard,
    create_confirmation_keyboard
)
from bot.states import BotCreationStates
from config import API_TOKEN, QUESTIONS_FILE

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



class TgBot:
    def __init__(self):
        print(API_TOKEN)
        self.bot = Bot(
            token=API_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher(storage=MemoryStorage())
        self.router = Router()
        self.db = DatabaseHandler()
        self.ai = OpenRouterManager()
        self.questions = self.load_questions()
        self.random_phrases = [
            "ü§ñ –û–π, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ü–æ–ø—Ä–æ–±—É–π üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
            "‚ú® –ö–∞–∂–µ—Ç—Å—è, —è –ø–æ—Ç–µ—Ä—è–ª—Å—è... –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
            "üéà –£–ø—Å! –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–µ—Ç /start?",
            "üîç –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–∂–º–∏ ‚ùì –ü–æ–º–æ—â—å",
            "üåå –í–∞—É, —ç—Ç–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ! –ù–æ —è –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ /newBot –∏ /help",
            "üç© –ú–º–º, –Ω–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —ç—Ç–æ. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞?",
            "üöÄ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞? –ñ–º–∏ üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞!",
            "üé≠ –û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è, –º—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ –ø–æ–Ω—è–ª–∏. –ü–æ–ø—Ä–æ–±—É–π üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
            "üìö –Ø –ø–æ–∫–∞ —É—á—É—Å—å! –ù–∞–∂–º–∏ üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
            "üåà –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ —Å /start?"
        ]
        self.register_handlers()
        self.dp.include_router(self.router)

    def load_questions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ"""
        try:
            with open(QUESTIONS_FILE, 'r', encoding='utf-8') as f:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                questions = [line.strip() for line in f if line.strip()]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                return questions
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {QUESTIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return []

    async def check_telegram_token(self, token: str) -> bool:
        try:
            temp_bot = Bot(token=token)
            await temp_bot.get_me()
            await temp_bot.session.close()
            return True
        except TelegramUnauthorizedError:
            return False
        except TelegramAPIError as e:
            logger.error(f"Telegram API error: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    def register_handlers(self):
        @self.router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
        async def start(message: types.Message):
            welcome_text = (
                """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø PersonaCrafter ‚Äî —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI-–±–æ—Ç–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—ã! üöÄ
            
‚ú® –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Äî üõ†Ô∏è –®–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø–æ–º–æ–≥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Äî üß† –ù–∞–ø–∏—à—É —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
‚Äî üîí –°–æ—Ö—Ä–∞–Ω—é –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω (–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞)
2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∫–µ—Ç—É –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞!

–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∏ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω! üí°

–î–ª—è –Ω–∞—á–∞–ª–∞ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üÜï *–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞*
                    """)


            await message.answer(welcome_text,parse_mode=ParseMode.MARKDOWN,reply_markup=create_main_keyboard())

        @self.router.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞" or F.text == "/start")
        async def new_bot(message: types.Message, state: FSMContext):
            if await self.db.user_exists(message.from_user.id):
                await message.answer("üö® –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±–æ—Ç! –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ? (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ) üòâ",
                                     reply_markup=create_main_keyboard())
                return

            await state.set_state(BotCreationStates.waiting_token)
            await message.answer(
                """**üéØ –í—Å—ë –ø—Ä–æ—Å—Ç–æ! 3 —à–∞–≥–∞ –¥–æ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞:**\n\n

1Ô∏è‚É£ **üîê –ü–æ–ª—É—á–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥**  
   ‚Äî –û—Ç–∫—Ä–æ–π @BotFather –≤ Telegram  
   ‚Äî –ù–∞–∂–º–∏ /newbot ‚Üí –ø—Ä–∏–¥—É–º–∞–π –∏–º—è –±–æ—Ç—É ‚Üí —Å–∫–æ–ø–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É **¬´API Token¬ª**  

2Ô∏è‚É£ **üì© –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞**  
   ‚Äî –í—Å—Ç–∞–≤—å –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ *—Ç–æ—á–Ω–æ –∫–∞–∫ –µ—Å—Ç—å* (–ø—Ä–∏–º–µ—Ä: `12345:AbcDefGhIJKLmNoPQRsTuV`)  
   ‚Äî üîí *–≠—Ç–æ –∫–∞–∫ –∫–ª—é—á –æ—Ç –∑–∞–º–∫–∞ ‚Äî –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π!*  

3Ô∏è‚É£ **‚ú® –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!**  
   ‚Äî –Ø —Å–∞–º –Ω–∞—Å—Ç—Ä–æ—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º  
   ‚Äî –û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ 
                   """,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_cancel_keyboard()
            )

        @self.router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
        async def cancel_handler(message: types.Message, state: FSMContext):
            await state.clear()
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())

        @self.router.message(BotCreationStates.waiting_token)
        async def process_token(message: types.Message, state: FSMContext):
            token = message.text.strip()

            if not re.match(r'^\d+:[a-zA-Z0-9_-]+$', token):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –ü—Ä–∏–º–µ—Ä: 1234567890:ABCdefGHIJKLMNopqrstUVWXYZ")
                return

            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")

            if not await self.check_telegram_token(token):
                await message.answer("üö® –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
                return

            try:
                temp_bot = Bot(token=token)
                bot_info = await temp_bot.get_me()
                await temp_bot.session.close()

                await self.db.add_user(message.from_user.id, token)
                await message.answer(
                    f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü—Ä–∏–≤–µ—Ç, {bot_info.full_name} (@{bot_info.username})!\n\n"
                    "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ! üé® –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫—Ä—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! ‚ú®",
                    reply_markup=types.ReplyKeyboardRemove()
                )

                await state.set_state(BotCreationStates.interview)
                await state.update_data(current_question=0, answers=[])
                await self.ask_question(message, state)

            except aiosqlite.IntegrityError:
                await message.answer("üö® –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∑–∞–Ω—è—Ç! –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
                await message.answer("üò¢ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

        @self.router.message(BotCreationStates.interview)
        async def process_answer(message: types.Message, state: FSMContext):
            data = await state.get_data()
            current = data['current_question']

            if current >= len(self.questions):
                await self.finish_interview(message, state)
                return

            answers = data.get('answers', [])
            answers.append((self.questions[current], message.text))
            await state.update_data(answers=answers, current_question=current + 1)
            await self.ask_question(message, state)

        @self.router.callback_query(BotCreationStates.confirmation)
        async def confirm_description(callback: types.CallbackQuery, state: FSMContext):
            if callback.data == "confirm_yes":
                data = await state.get_data()
                await self.db.update_description(callback.from_user.id, data['description'])
                await callback.message.edit_reply_markup()
                await callback.message.answer(
                    "‚úÖ *–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!* –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ @BotFather üéâ\n"
                    "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏! –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üòâ",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=create_main_keyboard()
                )
            else:
                await callback.message.edit_reply_markup()
                await callback.message.answer("üîÑ –•–æ—Ä–æ—à–æ! –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ? –ñ–º–∏ üÜï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞",
                                              reply_markup=create_main_keyboard())
            await state.clear()

        @self.router.message()
        async def unknown_message(message: types.Message):
            if message.text.startswith('/') and not message.text == ("/start"):
                await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!", reply_markup=create_main_keyboard())
            else:
                await message.answer(random.choice(self.random_phrases), reply_markup=create_main_keyboard())

    async def ask_question(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data['current_question']

        if current >= len(self.questions):
            await self.finish_interview(message, state)
            return

        question = f"‚ùì *–í–æ–ø—Ä–æ—Å {current + 1}/{len(self.questions)}:*\n{self.questions[current]}"
        await message.answer(question, parse_mode=ParseMode.MARKDOWN)

    async def finish_interview(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        try:
            await message.answer("üß† –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è... –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
            description = await self.ai.generate_description(data['answers'])
            await state.update_data(description=description)
            await state.set_state(BotCreationStates.confirmation)

            response_text = f"üéâ *–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å!*\n\n{description}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
            await message.answer(response_text,
                                 parse_mode=ParseMode.MARKDOWN,
                                 reply_markup=create_confirmation_keyboard())

        except Exception as e:
            logger.error(f"OpenRouter error: {e}")
            await message.answer("üò¢ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
                                 reply_markup=create_main_keyboard())
            await state.clear()

    async def run(self):
        await self.db.create_tables()
        await self.dp.start_polling(self.bot)


if __name__ == '__main__':
    bot = TgBot()
    asyncio.run(bot.run())